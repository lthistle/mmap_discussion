- How did you design your benchmarks?
For populate.cpp:
We used `dd if=/dev/random of=./data` to genereate ~65MB worth of random data. Our benchmarking-loop then proceeded to load a single byte from each page in this data file.

For huge.cpp:
We used the MAP_ANONYMOUS flag instead of a file descriptor, and used the same loop as above, loading a single byte from each 4kb of the file.

- What performance differences did you see?

For populate.cpp:
Performance difference wasn't too large, but still better than random noise.
The demand paging test ran at about 10.5 seconds while the map populate test ran at about 10.3 seconds.

For huge.cpp:
Performance difference was pretty large, with about 0.003 seconds for 4kb pages and about 0.0006 seconds for 2MB pages.


- If you have time / interest, lets try to look at what exactly caused these
performance differences above. Our hardware has special performance counters
for measuring certain events such as number of cache misses, cycles per
instruction, etc. We can use these counters ourselves using the perf
commandline tool. `perf list` will print a list of all the counters your
hardware + OS support. Which counters did you find most interesting? What
results did you observe?
